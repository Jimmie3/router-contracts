const hre = require("hardhat");
//matic mainnet
// router:0x4Cb1BF61a8b78f93fb0544f8c872F06808795cEb
// SwapAdapter:0xc6c6aE306F3D5b3C4183cc68761d8c2dB910c7b9
// FeeManager:0xC8933cC46a194dF6790e86557C7A01b08cEc95cD
// TransferProxy:0xB610CfDDDF797Db7B47e941E08Bf0E1cA1C6fa67

let usdc = "0x07865c6E87B9F70255377e024ace6630C1Eaa37F"; //Goerli - usdc

async function main() {
    //  await deployCCTPAdapter();
    //  await setRemoteAdapter()
    // await bridge()
    await onReceive();
    // await getHash();
}
//g - 0x1f8FA168a8C44821bEB44FED6783935a2F3C27C2
//a - 0x599F91B0E1Bd56B6E35629CBbA52d64d475dD8A9

async function getHash() {
    let a =
        "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002d40000000000000000000000010000000000039b4b0000000000000000000000001f8fa168a8c44821beb44fed6783935a2f3c27c2000000000000000000000000599f91b0e1bd56b6e35629cbba52d64d475dd8a9000000000000000000000000599f91b0e1bd56b6e35629cbba52d64d475dd8a90000000000000000000000000000000000000000000000000000000000039b4aaed601595a70ab815c96711a31bc65000000000000000000000000599f91b0e1bd56b6e35629cbba52d64d475dd8a9000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cdae5da23b64bfecd421d6487ffeabf6558828d00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000000cdae5da23b64bfecd421d6487ffeabf6558828d000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    let d = ethers.utils.defaultAbiCoder.decode(["bytes"], a)[0];
    console.log(d);
    console.log(ethers.utils.keccak256(d));
}

async function router() {
    let [wallet] = await hre.ethers.getSigners();
    let Router = await hre.ethers.getContractFactory("Router");

    let router = Router.attach("0x4Cb1BF61a8b78f93fb0544f8c872F06808795cEb");

    console.log(
        await router.getFee(
            "0x0cDAe5da23b64bFeCD421d6487FFEABF6558828d",
            "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
            hre.ethers.utils.parseEther("100")
        )
    );
}

async function deployCCTPAdapter() {
    let [wallet] = await hre.ethers.getSigners();
    console.log(wallet.address);
    let CCTPAdapter = await hre.ethers.getContractFactory("CCTPAdapter");
    let tokenMessage = "0xeb08f243e5d3fcff26a9e38ae5520a669f4019d0"; //
    let messageTransmitter = "0xa9fb1b3009dcb79e2fe346c16a604b8fa8ae0a79";
    let adapter = await CCTPAdapter.deploy(wallet.address, tokenMessage, messageTransmitter);
    await adapter.deployed();
    console.log(adapter.address);
}

async function setRemoteAdapter() {
    let CCTPAdapter = await hre.ethers.getContractFactory("CCTPAdapter");
    let adapter = await CCTPAdapter.attach("0x599F91B0E1Bd56B6E35629CBbA52d64d475dD8A9");
    let _domain = 0;
    let _adpter = "0x0000000000000000000000001f8FA168a8C44821bEB44FED6783935a2F3C27C2";
    await (await adapter.setRemoteAdapter(_domain, _adpter)).wait();
    console.log("------------done---------");
}

async function bridge() {
    let [wallet] = await hre.ethers.getSigners();
    let ERC20 = [
        "function approve(address spender, uint256 amount) external returns (bool)",
        "function balanceOf(address account) external view returns (uint256)",
        "function transfer(address to, uint value) external returns (bool)",
    ];

    let token = await ethers.getContractAt(ERC20, usdc, wallet);
    let amount = 10000000;
    await (await token.approve("0x1f8FA168a8C44821bEB44FED6783935a2F3C27C2", amount)).wait();
    let CCTPAdapter = await hre.ethers.getContractFactory("CCTPAdapter");
    let adapter = CCTPAdapter.attach("0x1f8FA168a8C44821bEB44FED6783935a2F3C27C2");
    let _mintRecipient = "0x000000000000000000000000599F91B0E1Bd56B6E35629CBbA52d64d475dD8A9";

    let c = token.interface.encodeFunctionData("transfer", [wallet.address, amount]);
    let _callData = ethers.utils.defaultAbiCoder.encode(
        ["tuple(address,address,uint256,uint256,address,bytes)"],
        [
            [
                "0x5425890298aed601595a70AB815c96711a31Bc65",
                "0x599F91B0E1Bd56B6E35629CBbA52d64d475dD8A9",
                amount,
                0,
                wallet.address,
                c,
            ],
        ]
    );

    await (
        await adapter.bridge(
            amount,
            1,
            _mintRecipient,
            usdc,
            ethers.utils.defaultAbiCoder.encode(
                ["bytes32", "bytes", "bytes"],
                [ethers.constants.HashZero, "0x", _callData]
            )
        )
    ).wait();
}

async function onReceive() {
    let CCTPAdapter = await hre.ethers.getContractFactory("CCTPAdapter");

    let adapter = await CCTPAdapter.attach("0x599F91B0E1Bd56B6E35629CBbA52d64d475dD8A9");
    let messages = [
        "0x0000000000000000000000010000000000039b4a000000000000000000000000d0c3da58f55358142b8d3e06c1c30c5c6114efe8000000000000000000000000eb08f243e5d3fcff26a9e38ae5520a669f4019d0000000000000000000000000599f91b0e1bd56b6e35629cbba52d64d475dd8a90000000000000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f000000000000000000000000599f91b0e1bd56b6e35629cbba52d64d475dd8a900000000000000000000000000000000000000000000000000000000009896800000000000000000000000001f8fa168a8c44821beb44fed6783935a2f3c27c2",
        "0x0000000000000000000000010000000000039b4b0000000000000000000000001f8fa168a8c44821beb44fed6783935a2f3c27c2000000000000000000000000599f91b0e1bd56b6e35629cbba52d64d475dd8a9000000000000000000000000599f91b0e1bd56b6e35629cbba52d64d475dd8a90000000000000000000000000000000000000000000000000000000000039b4aaed601595a70ab815c96711a31bc65000000000000000000000000599f91b0e1bd56b6e35629cbba52d64d475dd8a9000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cdae5da23b64bfecd421d6487ffeabf6558828d00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000000cdae5da23b64bfecd421d6487ffeabf6558828d000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000",
    ];

    let signatures = [
        "0x17941df77eee1931f812a3d4c137c625e08d995571bb2be426737bfc1eade56c425927108fa31e7277a67abd4b2bea8ac94776a02cc76f8fbbc79147a340eb831cfe738a0861115c15e23274446fa63616080a6ebaed2a9f454bc1340e8b5a054e3a4fe340771a2c6219573ad3899dccbc1668e643dfae6b1047cdacb8ae6e494c1c",
        "0xebe3c5ac7eb4cbb337025634d623f8efa9ef9e1ad47d0fac20cd35652c1f43f74c171f564c83c184810020b745262729bd9a39ce9d85133314c6962f053857a31b6a10311ace439fc1a27e1f5dd46b2dcd842e2911344acf6c45da8950ca7ac0665b995de3cba8c53ac2dfaaa50a8f6fbe2737b37b7df9f573c0dcc9cc6d38f1421b",
    ];
    await (
        await adapter.onReceive("0x5425890298aed601595a70AB815c96711a31Bc65", messages, signatures, {
            gasLimit: 2000000,
        })
    ).wait();
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
