const hre = require("hardhat");

async function main() {
    // await decode()
    await decodes();
}

async function decode() {
    let [wallet] = await ethers.getSigners();
    console.log(wallet.address);
    let Router = await ethers.getContractFactory("Router");
    let router = Router.attach("0x47be4c04c91d4897f8f27d32c7d79357b0939a91");

    // console.log(await router.approved("0x63212C5F70D1b374A023950a96bE3506779cAe24"));

    // console.log(await router.getFee("309452415502341394","0x0000000000000000000000000000000000000000",1))

    // console.log(await router.getInputBeforeFee("307286248593825004","0x0000000000000000000000000000000000000000",1))

    let data =
        "0xb543a85a3435326363396631326435363964323435633762616230633965343030633839000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000aa00000000000000000000000000000000000000000000000000000000000000ac0000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fcf07dfc2bc5287fdbd7a20fc6a7edb045a2a0a9000000000000000000000000fcf07dfc2bc5287fdbd7a20fc6a7edb045a2a0a9000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c10000000000000000000000003487b63d30b5b2c87fb7ffa8bcfade38eaac1abe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000844480a3411000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000820000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8b8af810d52e8c7d68721e799a0b79c1eaa1a4d000000000000000000000000d8b8af810d52e8c7d68721e799a0b79c1eaa1a4d000000000000000000000000c737deb9459fc54ea358ca93ef1bf2919ac9ab5c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000169b100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000604efa064650000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c100000000000000000000000000000000000000000000000000000000000169b100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c9e0ac33f138216c50638d71c344a299d0d10300000000000000000000000003c9e0ac33f138216c50638d71c344a299d0d103000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000404cef95229000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000169b1000000000000000000000000d8b8af810d52e8c7d68721e799a0b79c1eaa1a4d0000000000000000000000000000000000000000000000000000018b7ac52a5900000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000891cdb91d149f23b1a45d9c5ca78a88d0cb44c18000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c0000000000000000000000003487b63d30b5b2c87fb7ffa8bcfade38eaac1abe0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000276320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002763300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000117573646332706f6f6c747573647573647400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f

    let f = Router.interface.decodeFunctionData("swapAndCall", data);
    console.log(f);

    if (f._swapData !== "0x") {
        let swapData = ethers.utils.defaultAbiCoder.decode(
            ["tuple(uint8,address,address,address,address,uint256,bytes)"],
            f._swapData
        );
        console.log("swapData==================", swapData);
    }
    // console.log(await router.owner());

    // await (await router.setAuthorization("0xf5b509bB0909a69B1c207E495f687a596C168E12",true)).wait();

    if (f._callbackData !== "0x") {
        let callData = ethers.utils.defaultAbiCoder.decode(
            ["tuple(address,address,uint256,uint256,address,bytes)"],
            f._callbackData
        );
        console.log("callData=========================", callData);
    }
}

async function decodes() {
    let [wallet] = await ethers.getSigners();
    console.log(wallet.address);
    let SwapAdapter = await ethers.getContractFactory("SwapAdapter");

    let data =
        "0xefa064650000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c100000000000000000000000000000000000000000000000000000000000169b100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c9e0ac33f138216c50638d71c344a299d0d10300000000000000000000000003c9e0ac33f138216c50638d71c344a299d0d103000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000404cef95229000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000487b63d30b5b2c87fb7ffa8bcfade38eaac1abe0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000276320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002763300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000117573646332706f6f6c747573647573647400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    let f = SwapAdapter.interface.decodeFunctionData("swap", data);
    console.log(f);
    for (let index = 0; index < f.params.swaps; index++) {
        const element = f.params.swaps[index];
        console.log(element);
        console.log("11111111");
    }
    console.log("11111111");
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
